@use "src/styles/mixins" as *;

/*
 * Button Element
 */
.button {
	@include flex($inline: true, $align: center);
	box-sizing: border-box;
	padding: 5px 11px 6px 11px;
	border: 1px solid;
	border-radius: var(--control-corner-radius);
	font: {
		size: var(--control-font-size);
		weight: normal;
	}
	text-decoration: none;
	text-align: start;
	word-break: break-word;
	transition: 83ms ease background-color, 83ms ease box-shadow;
	user-select: none;

	&:hover {
		cursor: pointer;
	}

	// Button styles
	&.style- {
		// "Default" style
		&standard {
			border-color: var(--control-stroke-default);
			border-block-start-color: var(--control-stroke-secondary);
			background-color: var(--control-color-default);
			color: var(--text-color-primary);
			background-clip: padding-box;

			// Light theme styles
			@media (prefers-color-scheme: light) {
				border-color: var(--control-stroke-default);
				border-block-end-color: var(--control-stroke-secondary);
			}

			// Interaction states
			// Hover state
			&:hover {
				background-color: var(--control-color-secondary);
			}

			// Active (pressed) state
			&:active {
				border-color: var(--control-stroke-default);
				background-color: var(--control-color-tertiary);
				color: var(--text-color-secondary);
			}

			// Disabled state
			&:disabled,
			&.disabled {
				border-color: var(--control-stroke-default);
				background-color: var(--control-color-disabled);
				color: var(--text-color-disabled);
			}
		}

		// "Accent" style
		&accent {
			border-color: var(--control-accent-stroke-default);
			border-block-end-color: var(--control-accent-stroke-secondary);
			background-color: var(--accent-color-default);
			color: var(--accent-text-contrast-primary);

			// Interaction states
			// Hover state
			&:hover {
				background-color: var(--accent-color-secondary);
			}

			// Active (pressed) state
			&:active {
				border-color: transparent;
				background-color: var(--accent-color-tertiary);
				color: var(--accent-text-contrast-secondary);
			}

			// Disabled state
			&:disabled,
			&.disabled {
				border-color: transparent;
				background-color: var(--accent-color-disabled);
				color: var(--accent-text-contrast-disabled);
			}
		}
	}
}

/*
 * Split buttons
 * ==========================================
 * Wrapper element for styling multiple
 * <Button /> components as a singular split
 * style button.
*/

// NOTE: !important is required because we are using scoped styles
:global {
	.split-button {
		@include flex($align: center);

		.button {
			height: 100%;
			border-radius: 0 !important;
		}

		> .button:first-child,
		> *:first-child .button {
			border-radius: var(--control-corner-radius) 0 0
				var(--control-corner-radius) !important;
		}

		> .button:last-child,
		> *:last-child .button {
			border-radius: 0 var(--control-corner-radius) var(--control-corner-radius)
				0 !important;
		}
	}
}